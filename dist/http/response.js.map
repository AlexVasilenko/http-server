{"version":3,"sources":["../../src/http/response.js"],"names":["HttpResponse","constructor","socket","_headers","_isHeaderSent","_statusCode","_write","chunk","enc","next","_prepareHeaders","write","console","log","end","_normilizeHeaders","obj","normilizedHeaders","Object","keys","forEach","key","k","toLowerCase","value","status","arr","map","splice","headers","join","setHeader","headerName","emit","Error","headerNameLowerCase","writeHead","statusCode","assign"],"mappings":";;;;;;AAAA;;AAEA,MAAMA,YAAN,0BAAoC;AAClCC,cAAYC,MAAZ,EAAoB;AAClB;AACA,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,aAAL,GAAqB,KAArB;AACA,SAAKC,WAAL,GAAmB,GAAnB;AACD;;AAEDC,SAAOC,KAAP,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AACvB,QAAI,CAAC,KAAKL,aAAV,EAAyB;AACvB,WAAKD,QAAL,GAAgB,KAAKO,eAAL,CAAqB,KAAKP,QAA1B,EAAoC,KAAKE,WAAzC,CAAhB;AACA,WAAKD,aAAL,GAAqB,IAArB;AACA,WAAKF,MAAL,CAAYS,KAAZ,CAAkB,KAAKR,QAAvB;AACAS,cAAQC,GAAR,CAAY,GAAZ;AACD;;AAED,SAAKX,MAAL,CAAYS,KAAZ,CAAkBJ,KAAlB;AACA,SAAKL,MAAL,CAAYY,GAAZ;AACAL;AACD;;AAEDM,oBAAkBC,GAAlB,EAAuB;AACrB,UAAMC,oBAAoB,EAA1B;;AAEAC,WAAOC,IAAP,CAAYH,GAAZ,EAAiBI,OAAjB,CAAyBC,OAAO;AAC9B,YAAMC,IAAID,IAAIE,WAAJ,EAAV;AACA,YAAMC,QAAS,OAAOR,IAAIK,GAAJ,CAAP,KAAoB,QAArB,GAAiCL,IAAIK,GAAJ,EAASE,WAAT,EAAjC,GAA0DP,IAAIK,GAAJ,CAAxE;AACAJ,wBAAkBK,CAAlB,IAAuBE,KAAvB;AACD,KAJD;;AAMA,WAAOP,iBAAP;AACD;;AAEDP,kBAAgBM,GAAhB,EAAqBS,MAArB,EAA6B;AAC3B,UAAMC,MAAMR,OAAOC,IAAP,CAAYH,GAAZ,EAAiBW,GAAjB,CAAqBN,OAAQ,GAAEA,GAAI,KAAIL,IAAIK,GAAJ,CAAS,EAAhD,CAAZ;AACAK,QAAIE,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAkB,YAAWH,MAAO,EAApC;AACA,UAAMI,UAAW,GAAEH,IAAII,IAAJ,CAAS,MAAT,CAAiB,UAApC;AACA,WAAOD,OAAP;AACD;;AAEDE,YAAUC,UAAV,EAAsBR,KAAtB,EAA6B;AAC3B,QAAI,KAAKpB,aAAT,EAAwB;AACtB,WAAK6B,IAAL,CAAU,OAAV,EAAmB,IAAIC,KAAJ,CAAU,0BAAV,CAAnB;AACD;;AAED,UAAMC,sBAAsBH,WAAWT,WAAX,EAA5B;AACA,SAAKpB,QAAL,CAAcgC,mBAAd,IAAqCX,KAArC;AACD;;AAEDY,YAAUC,UAAV,EAAsBR,OAAtB,EAA+B;AAC7B,QAAI,KAAKzB,aAAT,EAAwB;AACtB,WAAK6B,IAAL,CAAU,OAAV,EAAmB,IAAIC,KAAJ,CAAU,0BAAV,CAAnB;AACD;;AAED,QAAI,OAAOG,UAAP,KAAsB,QAA1B,EAAoC;AAClC,WAAKJ,IAAL,CAAU,OAAV,EAAmB,IAAIC,KAAJ,CAAU,0BAAV,CAAnB;AACD;;AAED,QAAIL,OAAJ,EAAa;AACX,YAAMZ,oBAAoB,KAAKF,iBAAL,CAAuBc,OAAvB,CAA1B;AACA,WAAK1B,QAAL,GAAgBe,OAAOoB,MAAP,CAAc,KAAKnC,QAAnB,EAA6Bc,iBAA7B,CAAhB;AACD;;AAED,SAAKZ,WAAL,GAAmBgC,UAAnB;AACA,SAAKlC,QAAL,GAAgB,KAAKO,eAAL,CAAqB,KAAKP,QAA1B,EAAoC,KAAKE,WAAzC,CAAhB;AACA,SAAKD,aAAL,GAAqB,IAArB;AACA,SAAKF,MAAL,CAAYS,KAAZ,CAAkB,KAAKR,QAAvB;AACD;AApEiC;;kBAuErBH,Y","file":"response.js","sourcesContent":["import { Writable } from 'stream';\n\nclass HttpResponse extends Writable {\n  constructor(socket) {\n    super();\n    this.socket = socket;\n    this._headers = {};\n    this._isHeaderSent = false;\n    this._statusCode = 200;\n  }\n\n  _write(chunk, enc, next) {\n    if (!this._isHeaderSent) {\n      this._headers = this._prepareHeaders(this._headers, this._statusCode);\n      this._isHeaderSent = true;\n      this.socket.write(this._headers);\n      console.log('1')\n    }\n\n    this.socket.write(chunk);\n    this.socket.end();\n    next();\n  }\n\n  _normilizeHeaders(obj) {\n    const normilizedHeaders = {};\n\n    Object.keys(obj).forEach(key => {\n      const k = key.toLowerCase();\n      const value = (typeof obj[key] === 'string') ? obj[key].toLowerCase() : obj[key];\n      normilizedHeaders[k] = value;\n    });\n\n    return normilizedHeaders;\n  }\n\n  _prepareHeaders(obj, status) {\n    const arr = Object.keys(obj).map(key => `${key}: ${obj[key]}`);\n    arr.splice(0, 0, `HTTP/1.1 ${status}`);\n    const headers = `${arr.join('\\r\\n')}\\r\\n\\r\\n`;\n    return headers;\n  };\n\n  setHeader(headerName, value) {\n    if (this._isHeaderSent) {\n      this.emit('error', new Error('headers are already sent'));\n    }\n\n    const headerNameLowerCase = headerName.toLowerCase();\n    this._headers[headerNameLowerCase] = value;\n  };\n\n  writeHead(statusCode, headers) {\n    if (this._isHeaderSent) {\n      this.emit('error', new Error('headers are already sent'));\n    }\n\n    if (typeof statusCode !== 'number') {\n      this.emit('error', new Error('status code is not valid'));\n    }\n\n    if (headers) {\n      const normilizedHeaders = this._normilizeHeaders(headers);\n      this._headers = Object.assign(this._headers, normilizedHeaders);\n    }\n\n    this._statusCode = statusCode;\n    this._headers = this._prepareHeaders(this._headers, this._statusCode);\n    this._isHeaderSent = true;\n    this.socket.write(this._headers);\n  }\n}\n\nexport default HttpResponse;"]}