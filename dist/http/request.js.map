{"version":3,"sources":["../../src/http/request.js"],"names":["HttpRequest","constructor","socket","headers","method","url","_timeoutOnMaxHeadersRecievingTime","_maxHeadersRecievingTime","_onData","_read","resume","_processHeaders","buffer","headersArray","toString","split","httpTypeString","splice","_parseHeaders","_getMetod","_getUrl","map","data","dataArr","response","key","shift","toLowerCase","value","join","reduce","result","item","Object","keys","obj","Buffer","alloc","setTimeout","emit","Error","on","concat","indexOfHeadersEnd","indexOf","isHeadersRecieved","headersBuffer","slice","devider","bodyBuffer","length","unshift","push","pause","clearTimeout","end"],"mappings":"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","file":"request.js","sourcesContent":["import { Readable } from 'stream';\n\nclass HttpRequest extends Readable {\n  constructor(socket) {\n    super();\n    this.socket = socket;\n    this.headers = null;\n    this.method = null;\n    this.url = null;\n    this._timeoutOnMaxHeadersRecievingTime;\n    this._maxHeadersRecievingTime = 30000;\n    this._onData();\n  }\n\n  _read() {\n    this.socket.resume();\n  }\n\n  _processHeaders(buffer) {\n    const headersArray = buffer.toString().split('\\r\\n');\n    const httpTypeString = headersArray.splice(0, 1).toString();\n\n    this.headers = this._parseHeaders(headersArray);\n    this.method = this._getMetod(httpTypeString);\n    this.url = this._getUrl(httpTypeString);\n  }\n\n  _parseHeaders(headersArray) {\n\n    return headersArray\n      .map((data) => {\n        const dataArr = data.split(': ');\n        const response = {};\n        const key = dataArr.shift().toLowerCase();\n        const value = dataArr.join(': ')\n        response[key] = value;\n        return response;\n      })\n      .reduce((result, item) => {\n        const key = Object.keys(item)[0];\n        const obj = result;\n        obj[key] = item[key];\n        return obj;\n      }, {});\n  }\n\n  _getMetod(httpTypeString) {\n    return httpTypeString.split(' ')[0]\n  }\n\n  _getUrl(httpTypeString) {\n    return httpTypeString.split(' ')[1].split(' ')[0];\n  }\n\n  _onData() {\n    let buffer = Buffer.alloc(0);\n\n    if (!this._timeoutOnMaxHeadersRecievingTime) {\n      this._timeoutOnMaxHeadersRecievingTime = setTimeout(() => {\n        this.socket.emit('error', new Error('HTTP 408 Request Timeout'));\n      }, this._maxHeadersRecievingTime);\n    }\n\n    this.socket.on('data', data => {\n      if (!this.headers) {\n        buffer = Buffer.concat([buffer, data]);\n        const indexOfHeadersEnd = buffer.indexOf('\\r\\n\\r\\n');\n        const isHeadersRecieved = (indexOfHeadersEnd !== -1);\n\n        if (!isHeadersRecieved) {\n          return;\n        }\n\n        const headersBuffer = buffer.slice(0, indexOfHeadersEnd);\n        const devider = 4;\n        const bodyBuffer = buffer.slice(indexOfHeadersEnd + devider);\n\n        this._processHeaders(headersBuffer);\n\n        if (bodyBuffer.length) {\n          this.socket.unshift(bodyBuffer);\n        }\n\n        // clearTimeout(this._timeoutOnMaxHeadersRecievingTime);\n        this.emit('headers');\n      } else {\n        this.push(data);\n        this.socket.pause();\n      }\n    })\n\n    // socket on data not ever empty, so we have to close the request stream on socket 'end' event\n    // event is emitted when the other end of the socket sends a FIN packet\n    this.socket.on('end', () => {\n      this.push(null);\n      clearTimeout(this._timeoutOnMaxHeadersRecievingTime);\n    });\n\n    this.socket.on('close', () => {\n      this.emit('close');\n      clearTimeout(this._timeoutOnMaxHeadersRecievingTime);\n    });\n  }\n\n  end() {\n    this.push(null);\n  }\n}\n\nexport default HttpRequest;"]}